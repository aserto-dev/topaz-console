import {
  useCallback
} from 'react';

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * Directory
 * Directory service
 * OpenAPI spec version: v0.33.5
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';

import type {
  DirectoryAssertionV3AssertionsListParams,
  DirectoryModelV3ManifestDeleteParams,
  DirectoryReaderV3GraphParams,
  DirectoryReaderV3ObjectGetParams,
  DirectoryReaderV3ObjectsListParams,
  DirectoryReaderV3RelationGetParams,
  DirectoryReaderV3RelationsListParams,
  DirectoryWriterV3ObjectDeleteParams,
  DirectoryWriterV3RelationDeleteParams,
  RpcStatus,
  V1ActionSearchRequest,
  V1ActionSearchResponse,
  V1EvaluationRequest,
  V1EvaluationResponse,
  V1EvaluationsRequest,
  V1EvaluationsResponse,
  V1ResourceSearchRequest,
  V1ResourceSearchResponse,
  V1SubjectSearchRequest,
  V1SubjectSearchResponse,
  V3CheckPermissionRequest,
  V3CheckPermissionResponse,
  V3CheckRelationRequest,
  V3CheckRelationResponse,
  V3CheckRequest,
  V3CheckResponse,
  V3ChecksRequest,
  V3ChecksResponse,
  V3DeleteAssertionResponse,
  V3DeleteManifestResponse,
  V3DeleteObjectResponse,
  V3DeleteRelationResponse,
  V3GetAssertionResponse,
  V3GetGraphResponse,
  V3GetObjectResponse,
  V3GetObjectsResponse,
  V3GetRelationResponse,
  V3GetRelationsResponse,
  V3ListAssertionsResponse,
  V3SetAssertionRequest,
  V3SetAssertionResponse,
  V3SetManifestResponse,
  V3SetObjectRequest,
  V3SetObjectResponse,
  V3SetRelationRequest,
  V3SetRelationResponse
} from '../../types/directory';

import { useDirectoryReaderClient } from '../clients/rest';
import { useDirectoryModelClient } from '../clients/rest';
import { useDirectoryWriterClient } from '../clients/rest';
/**
 * TBD
 * @summary Access Evaluation API
 */
export const useOpenidAuthzenAccessV1EvaluationPostHook = () => {
        const openidAuthzenAccessV1EvaluationPost = useDirectoryReaderClient<V1EvaluationResponse>();

        return useCallback((
    v1EvaluationRequest: V1EvaluationRequest,
 signal?: AbortSignal
) => {
        return openidAuthzenAccessV1EvaluationPost(
          {data: v1EvaluationRequest, headers: {'Content-Type': 'application/json', },
      method: 'POST',
      signal, url: `/access/v1/evaluation`
    },
          );
        }, [openidAuthzenAccessV1EvaluationPost])
      }
    


export const useOpenidAuthzenAccessV1EvaluationPostMutationOptions = <TError = RpcStatus | unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1EvaluationPostHook>>>, TError,{data: V1EvaluationRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1EvaluationPostHook>>>, TError,{data: V1EvaluationRequest}, TContext> => {
    
const mutationKey = ['openidAuthzenAccessV1EvaluationPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const openidAuthzenAccessV1EvaluationPost =  useOpenidAuthzenAccessV1EvaluationPostHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1EvaluationPostHook>>>, {data: V1EvaluationRequest}> = (props) => {
          const {data} = props ?? {};

          return  openidAuthzenAccessV1EvaluationPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OpenidAuthzenAccessV1EvaluationPostMutationBody = V1EvaluationRequest
    export type OpenidAuthzenAccessV1EvaluationPostMutationError = RpcStatus | unknown
    export type OpenidAuthzenAccessV1EvaluationPostMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1EvaluationPostHook>>>>

    /**
 * @summary Access Evaluation API
 */
export const useOpenidAuthzenAccessV1EvaluationPost = <TError = RpcStatus | unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1EvaluationPostHook>>>, TError,{data: V1EvaluationRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1EvaluationPostHook>>>,
        TError,
        {data: V1EvaluationRequest},
        TContext
      > => {

      const mutationOptions = useOpenidAuthzenAccessV1EvaluationPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * TBD.
 * @summary Access Evaluations API
 */
export const useOpenidAuthzenAccessV1EvaluationsPostHook = () => {
        const openidAuthzenAccessV1EvaluationsPost = useDirectoryReaderClient<V1EvaluationsResponse>();

        return useCallback((
    v1EvaluationsRequest: V1EvaluationsRequest,
 signal?: AbortSignal
) => {
        return openidAuthzenAccessV1EvaluationsPost(
          {data: v1EvaluationsRequest, headers: {'Content-Type': 'application/json', },
      method: 'POST',
      signal, url: `/access/v1/evaluations`
    },
          );
        }, [openidAuthzenAccessV1EvaluationsPost])
      }
    


export const useOpenidAuthzenAccessV1EvaluationsPostMutationOptions = <TError = RpcStatus | unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1EvaluationsPostHook>>>, TError,{data: V1EvaluationsRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1EvaluationsPostHook>>>, TError,{data: V1EvaluationsRequest}, TContext> => {
    
const mutationKey = ['openidAuthzenAccessV1EvaluationsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const openidAuthzenAccessV1EvaluationsPost =  useOpenidAuthzenAccessV1EvaluationsPostHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1EvaluationsPostHook>>>, {data: V1EvaluationsRequest}> = (props) => {
          const {data} = props ?? {};

          return  openidAuthzenAccessV1EvaluationsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OpenidAuthzenAccessV1EvaluationsPostMutationBody = V1EvaluationsRequest
    export type OpenidAuthzenAccessV1EvaluationsPostMutationError = RpcStatus | unknown
    export type OpenidAuthzenAccessV1EvaluationsPostMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1EvaluationsPostHook>>>>

    /**
 * @summary Access Evaluations API
 */
export const useOpenidAuthzenAccessV1EvaluationsPost = <TError = RpcStatus | unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1EvaluationsPostHook>>>, TError,{data: V1EvaluationsRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1EvaluationsPostHook>>>,
        TError,
        {data: V1EvaluationsRequest},
        TContext
      > => {

      const mutationOptions = useOpenidAuthzenAccessV1EvaluationsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * TBD.
 * @summary Action Search API
 */
export const useOpenidAuthzenAccessV1SearchActionPostHook = () => {
        const openidAuthzenAccessV1SearchActionPost = useDirectoryReaderClient<V1ActionSearchResponse>();

        return useCallback((
    v1ActionSearchRequest: V1ActionSearchRequest,
 signal?: AbortSignal
) => {
        return openidAuthzenAccessV1SearchActionPost(
          {data: v1ActionSearchRequest, headers: {'Content-Type': 'application/json', },
      method: 'POST',
      signal, url: `/access/v1/search/action`
    },
          );
        }, [openidAuthzenAccessV1SearchActionPost])
      }
    


export const useOpenidAuthzenAccessV1SearchActionPostMutationOptions = <TError = RpcStatus | unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1SearchActionPostHook>>>, TError,{data: V1ActionSearchRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1SearchActionPostHook>>>, TError,{data: V1ActionSearchRequest}, TContext> => {
    
const mutationKey = ['openidAuthzenAccessV1SearchActionPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const openidAuthzenAccessV1SearchActionPost =  useOpenidAuthzenAccessV1SearchActionPostHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1SearchActionPostHook>>>, {data: V1ActionSearchRequest}> = (props) => {
          const {data} = props ?? {};

          return  openidAuthzenAccessV1SearchActionPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OpenidAuthzenAccessV1SearchActionPostMutationBody = V1ActionSearchRequest
    export type OpenidAuthzenAccessV1SearchActionPostMutationError = RpcStatus | unknown
    export type OpenidAuthzenAccessV1SearchActionPostMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1SearchActionPostHook>>>>

    /**
 * @summary Action Search API
 */
export const useOpenidAuthzenAccessV1SearchActionPost = <TError = RpcStatus | unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1SearchActionPostHook>>>, TError,{data: V1ActionSearchRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1SearchActionPostHook>>>,
        TError,
        {data: V1ActionSearchRequest},
        TContext
      > => {

      const mutationOptions = useOpenidAuthzenAccessV1SearchActionPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * TBD.
 * @summary Resource Search API
 */
export const useOpenidAuthzenAccessV1SearchPostHook = () => {
        const openidAuthzenAccessV1SearchPost = useDirectoryReaderClient<V1ResourceSearchResponse>();

        return useCallback((
    v1ResourceSearchRequest: V1ResourceSearchRequest,
 signal?: AbortSignal
) => {
        return openidAuthzenAccessV1SearchPost(
          {data: v1ResourceSearchRequest, headers: {'Content-Type': 'application/json', },
      method: 'POST',
      signal, url: `/access/v1/search/resource`
    },
          );
        }, [openidAuthzenAccessV1SearchPost])
      }
    


export const useOpenidAuthzenAccessV1SearchPostMutationOptions = <TError = RpcStatus | unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1SearchPostHook>>>, TError,{data: V1ResourceSearchRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1SearchPostHook>>>, TError,{data: V1ResourceSearchRequest}, TContext> => {
    
const mutationKey = ['openidAuthzenAccessV1SearchPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const openidAuthzenAccessV1SearchPost =  useOpenidAuthzenAccessV1SearchPostHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1SearchPostHook>>>, {data: V1ResourceSearchRequest}> = (props) => {
          const {data} = props ?? {};

          return  openidAuthzenAccessV1SearchPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OpenidAuthzenAccessV1SearchPostMutationBody = V1ResourceSearchRequest
    export type OpenidAuthzenAccessV1SearchPostMutationError = RpcStatus | unknown
    export type OpenidAuthzenAccessV1SearchPostMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1SearchPostHook>>>>

    /**
 * @summary Resource Search API
 */
export const useOpenidAuthzenAccessV1SearchPost = <TError = RpcStatus | unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1SearchPostHook>>>, TError,{data: V1ResourceSearchRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1SearchPostHook>>>,
        TError,
        {data: V1ResourceSearchRequest},
        TContext
      > => {

      const mutationOptions = useOpenidAuthzenAccessV1SearchPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * TBD.
 * @summary Subject Search API
 */
export const useOpenidAuthzenAccessV1SearchSubjectPostHook = () => {
        const openidAuthzenAccessV1SearchSubjectPost = useDirectoryReaderClient<V1SubjectSearchResponse>();

        return useCallback((
    v1SubjectSearchRequest: V1SubjectSearchRequest,
 signal?: AbortSignal
) => {
        return openidAuthzenAccessV1SearchSubjectPost(
          {data: v1SubjectSearchRequest, headers: {'Content-Type': 'application/json', },
      method: 'POST',
      signal, url: `/access/v1/search/subject`
    },
          );
        }, [openidAuthzenAccessV1SearchSubjectPost])
      }
    


export const useOpenidAuthzenAccessV1SearchSubjectPostMutationOptions = <TError = RpcStatus | unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1SearchSubjectPostHook>>>, TError,{data: V1SubjectSearchRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1SearchSubjectPostHook>>>, TError,{data: V1SubjectSearchRequest}, TContext> => {
    
const mutationKey = ['openidAuthzenAccessV1SearchSubjectPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const openidAuthzenAccessV1SearchSubjectPost =  useOpenidAuthzenAccessV1SearchSubjectPostHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1SearchSubjectPostHook>>>, {data: V1SubjectSearchRequest}> = (props) => {
          const {data} = props ?? {};

          return  openidAuthzenAccessV1SearchSubjectPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OpenidAuthzenAccessV1SearchSubjectPostMutationBody = V1SubjectSearchRequest
    export type OpenidAuthzenAccessV1SearchSubjectPostMutationError = RpcStatus | unknown
    export type OpenidAuthzenAccessV1SearchSubjectPostMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1SearchSubjectPostHook>>>>

    /**
 * @summary Subject Search API
 */
export const useOpenidAuthzenAccessV1SearchSubjectPost = <TError = RpcStatus | unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1SearchSubjectPostHook>>>, TError,{data: V1SubjectSearchRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useOpenidAuthzenAccessV1SearchSubjectPostHook>>>,
        TError,
        {data: V1SubjectSearchRequest},
        TContext
      > => {

      const mutationOptions = useOpenidAuthzenAccessV1SearchSubjectPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Set assertion.
 * @summary Set assertion
 */
export const useDirectoryAssertionV3AssertionSetHook = () => {
        const directoryAssertionV3AssertionSet = useDirectoryReaderClient<V3SetAssertionResponse>();

        return useCallback((
    v3SetAssertionRequest: V3SetAssertionRequest,
 signal?: AbortSignal
) => {
        return directoryAssertionV3AssertionSet(
          {data: v3SetAssertionRequest, headers: {'Content-Type': 'application/json', },
      method: 'POST',
      signal, url: `/api/v3/directory/assertion`
    },
          );
        }, [directoryAssertionV3AssertionSet])
      }
    


export const useDirectoryAssertionV3AssertionSetMutationOptions = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionSetHook>>>, TError,{data: V3SetAssertionRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionSetHook>>>, TError,{data: V3SetAssertionRequest}, TContext> => {
    
const mutationKey = ['directoryAssertionV3AssertionSet'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const directoryAssertionV3AssertionSet =  useDirectoryAssertionV3AssertionSetHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionSetHook>>>, {data: V3SetAssertionRequest}> = (props) => {
          const {data} = props ?? {};

          return  directoryAssertionV3AssertionSet(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DirectoryAssertionV3AssertionSetMutationBody = V3SetAssertionRequest
    export type DirectoryAssertionV3AssertionSetMutationError = RpcStatus
    export type DirectoryAssertionV3AssertionSetMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionSetHook>>>>

    /**
 * @summary Set assertion
 */
export const useDirectoryAssertionV3AssertionSet = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionSetHook>>>, TError,{data: V3SetAssertionRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionSetHook>>>,
        TError,
        {data: V3SetAssertionRequest},
        TContext
      > => {

      const mutationOptions = useDirectoryAssertionV3AssertionSetMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Delete assertion.
 * @summary Delete assertion
 */
export const useDirectoryAssertionV3AssertionDeleteHook = () => {
        const directoryAssertionV3AssertionDelete = useDirectoryReaderClient<V3DeleteAssertionResponse>();

        return useCallback((
    id: number,
 ) => {
        return directoryAssertionV3AssertionDelete(
          {method: 'DELETE', url: `/api/v3/directory/assertion/${id}`
    },
          );
        }, [directoryAssertionV3AssertionDelete])
      }
    


export const useDirectoryAssertionV3AssertionDeleteMutationOptions = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionDeleteHook>>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionDeleteHook>>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['directoryAssertionV3AssertionDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const directoryAssertionV3AssertionDelete =  useDirectoryAssertionV3AssertionDeleteHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionDeleteHook>>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  directoryAssertionV3AssertionDelete(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DirectoryAssertionV3AssertionDeleteMutationError = RpcStatus
    
    export type DirectoryAssertionV3AssertionDeleteMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionDeleteHook>>>>

    /**
 * @summary Delete assertion
 */
export const useDirectoryAssertionV3AssertionDelete = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionDeleteHook>>>, TError,{id: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionDeleteHook>>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = useDirectoryAssertionV3AssertionDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Returns single assertion instance.
 * @summary Get assertion instance
 */
export const useDirectoryAssertionV3AssertionGetHook = () => {
        const directoryAssertionV3AssertionGet = useDirectoryReaderClient<V3GetAssertionResponse>();

        return useCallback((
    id: number,
 signal?: AbortSignal
) => {
        return directoryAssertionV3AssertionGet(
          {method: 'GET', signal, url: `/api/v3/directory/assertion/${id}`
    },
          );
        }, [directoryAssertionV3AssertionGet])
      }
    

export const getDirectoryAssertionV3AssertionGetQueryKey = (id: number,) => {
    return [`/api/v3/directory/assertion/${id}`] as const;
    }

    
export const useDirectoryAssertionV3AssertionGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionGetHook>>>, TError = RpcStatus>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionGetHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDirectoryAssertionV3AssertionGetQueryKey(id);

  const directoryAssertionV3AssertionGet =  useDirectoryAssertionV3AssertionGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionGetHook>>>> = ({ signal }) => directoryAssertionV3AssertionGet(id, signal);

      

      

   return  { enabled: !!(id), queryFn, queryKey, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionGetHook>>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DirectoryAssertionV3AssertionGetQueryError = RpcStatus
export type DirectoryAssertionV3AssertionGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionGetHook>>>>


export function useDirectoryAssertionV3AssertionGet<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionGetHook>>>, TError = RpcStatus>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionGetHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionGetHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionGetHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryAssertionV3AssertionGet<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionGetHook>>>, TError = RpcStatus>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionGetHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionGetHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionGetHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryAssertionV3AssertionGet<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionGetHook>>>, TError = RpcStatus>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionGetHook>>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get assertion instance
 */

export function useDirectoryAssertionV3AssertionGet<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionGetHook>>>, TError = RpcStatus>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionGetHook>>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useDirectoryAssertionV3AssertionGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns list of assertion instances.
 * @summary List assertions
 */
export const useDirectoryAssertionV3AssertionsListHook = () => {
        const directoryAssertionV3AssertionsList = useDirectoryReaderClient<V3ListAssertionsResponse>();

        return useCallback((
    params?: DirectoryAssertionV3AssertionsListParams,
 signal?: AbortSignal
) => {
        return directoryAssertionV3AssertionsList(
          {method: 'GET', params,
        signal, url: `/api/v3/directory/assertions`
    },
          );
        }, [directoryAssertionV3AssertionsList])
      }
    

export const getDirectoryAssertionV3AssertionsListQueryKey = (params?: DirectoryAssertionV3AssertionsListParams,) => {
    return [`/api/v3/directory/assertions`, ...(params ? [params]: [])] as const;
    }

    
export const useDirectoryAssertionV3AssertionsListInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, DirectoryAssertionV3AssertionsListParams['page.token']>, TError = RpcStatus>(params?: DirectoryAssertionV3AssertionsListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, TError, TData, Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, QueryKey, DirectoryAssertionV3AssertionsListParams['page.token']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDirectoryAssertionV3AssertionsListQueryKey(params);

  const directoryAssertionV3AssertionsList =  useDirectoryAssertionV3AssertionsListHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, QueryKey, DirectoryAssertionV3AssertionsListParams['page.token']> = ({ pageParam, signal }) => directoryAssertionV3AssertionsList({...params, 'page.token': pageParam || params?.['page.token']}, signal);

      

      

   return  { queryFn, queryKey, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, TError, TData, Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, QueryKey, DirectoryAssertionV3AssertionsListParams['page.token']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DirectoryAssertionV3AssertionsListInfiniteQueryError = RpcStatus
export type DirectoryAssertionV3AssertionsListInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>>


export function useDirectoryAssertionV3AssertionsListInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, DirectoryAssertionV3AssertionsListParams['page.token']>, TError = RpcStatus>(
 params: DirectoryAssertionV3AssertionsListParams |  undefined, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, TError, TData, Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, QueryKey, DirectoryAssertionV3AssertionsListParams['page.token']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryAssertionV3AssertionsListInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, DirectoryAssertionV3AssertionsListParams['page.token']>, TError = RpcStatus>(
 params?: DirectoryAssertionV3AssertionsListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, TError, TData, Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, QueryKey, DirectoryAssertionV3AssertionsListParams['page.token']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryAssertionV3AssertionsListInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, DirectoryAssertionV3AssertionsListParams['page.token']>, TError = RpcStatus>(
 params?: DirectoryAssertionV3AssertionsListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, TError, TData, Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, QueryKey, DirectoryAssertionV3AssertionsListParams['page.token']>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List assertions
 */

export function useDirectoryAssertionV3AssertionsListInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, DirectoryAssertionV3AssertionsListParams['page.token']>, TError = RpcStatus>(
 params?: DirectoryAssertionV3AssertionsListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, TError, TData, Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, QueryKey, DirectoryAssertionV3AssertionsListParams['page.token']>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useDirectoryAssertionV3AssertionsListInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useDirectoryAssertionV3AssertionsListQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, TError = RpcStatus>(params?: DirectoryAssertionV3AssertionsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDirectoryAssertionV3AssertionsListQueryKey(params);

  const directoryAssertionV3AssertionsList =  useDirectoryAssertionV3AssertionsListHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>> = ({ signal }) => directoryAssertionV3AssertionsList(params, signal);

      

      

   return  { queryFn, queryKey, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DirectoryAssertionV3AssertionsListQueryError = RpcStatus
export type DirectoryAssertionV3AssertionsListQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>>


export function useDirectoryAssertionV3AssertionsList<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, TError = RpcStatus>(
 params: DirectoryAssertionV3AssertionsListParams |  undefined, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryAssertionV3AssertionsList<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, TError = RpcStatus>(
 params?: DirectoryAssertionV3AssertionsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryAssertionV3AssertionsList<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, TError = RpcStatus>(
 params?: DirectoryAssertionV3AssertionsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List assertions
 */

export function useDirectoryAssertionV3AssertionsList<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, TError = RpcStatus>(
 params?: DirectoryAssertionV3AssertionsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryAssertionV3AssertionsListHook>>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useDirectoryAssertionV3AssertionsListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns check outcome.
 * @summary Check
 */
export const useDirectoryReaderV3CheckHook = () => {
        const directoryReaderV3Check = useDirectoryReaderClient<V3CheckResponse>();

        return useCallback((
    v3CheckRequest: V3CheckRequest,
 signal?: AbortSignal
) => {
        return directoryReaderV3Check(
          {data: v3CheckRequest, headers: {'Content-Type': 'application/json', },
      method: 'POST',
      signal, url: `/api/v3/directory/check`
    },
          );
        }, [directoryReaderV3Check])
      }
    


export const useDirectoryReaderV3CheckMutationOptions = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3CheckHook>>>, TError,{data: V3CheckRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3CheckHook>>>, TError,{data: V3CheckRequest}, TContext> => {
    
const mutationKey = ['directoryReaderV3Check'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const directoryReaderV3Check =  useDirectoryReaderV3CheckHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3CheckHook>>>, {data: V3CheckRequest}> = (props) => {
          const {data} = props ?? {};

          return  directoryReaderV3Check(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DirectoryReaderV3CheckMutationBody = V3CheckRequest
    export type DirectoryReaderV3CheckMutationError = RpcStatus
    export type DirectoryReaderV3CheckMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3CheckHook>>>>

    /**
 * @summary Check
 */
export const useDirectoryReaderV3Check = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3CheckHook>>>, TError,{data: V3CheckRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3CheckHook>>>,
        TError,
        {data: V3CheckRequest},
        TContext
      > => {

      const mutationOptions = useDirectoryReaderV3CheckMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Returns check permission outcome.
 * @deprecated
 * @summary Check permission
 */
export const useDirectoryReaderV3CheckPermissionHook = () => {
        const directoryReaderV3CheckPermission = useDirectoryReaderClient<V3CheckPermissionResponse>();

        return useCallback((
    v3CheckPermissionRequest: V3CheckPermissionRequest,
 signal?: AbortSignal
) => {
        return directoryReaderV3CheckPermission(
          {data: v3CheckPermissionRequest, headers: {'Content-Type': 'application/json', },
      method: 'POST',
      signal, url: `/api/v3/directory/check/permission`
    },
          );
        }, [directoryReaderV3CheckPermission])
      }
    


export const useDirectoryReaderV3CheckPermissionMutationOptions = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3CheckPermissionHook>>>, TError,{data: V3CheckPermissionRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3CheckPermissionHook>>>, TError,{data: V3CheckPermissionRequest}, TContext> => {
    
const mutationKey = ['directoryReaderV3CheckPermission'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const directoryReaderV3CheckPermission =  useDirectoryReaderV3CheckPermissionHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3CheckPermissionHook>>>, {data: V3CheckPermissionRequest}> = (props) => {
          const {data} = props ?? {};

          return  directoryReaderV3CheckPermission(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DirectoryReaderV3CheckPermissionMutationBody = V3CheckPermissionRequest
    export type DirectoryReaderV3CheckPermissionMutationError = RpcStatus
    export type DirectoryReaderV3CheckPermissionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3CheckPermissionHook>>>>

    /**
 * @deprecated
 * @summary Check permission
 */
export const useDirectoryReaderV3CheckPermission = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3CheckPermissionHook>>>, TError,{data: V3CheckPermissionRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3CheckPermissionHook>>>,
        TError,
        {data: V3CheckPermissionRequest},
        TContext
      > => {

      const mutationOptions = useDirectoryReaderV3CheckPermissionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Returns check relation outcome.
 * @deprecated
 * @summary Check relation
 */
export const useDirectoryReaderV3CheckRelationHook = () => {
        const directoryReaderV3CheckRelation = useDirectoryReaderClient<V3CheckRelationResponse>();

        return useCallback((
    v3CheckRelationRequest: V3CheckRelationRequest,
 signal?: AbortSignal
) => {
        return directoryReaderV3CheckRelation(
          {data: v3CheckRelationRequest, headers: {'Content-Type': 'application/json', },
      method: 'POST',
      signal, url: `/api/v3/directory/check/relation`
    },
          );
        }, [directoryReaderV3CheckRelation])
      }
    


export const useDirectoryReaderV3CheckRelationMutationOptions = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3CheckRelationHook>>>, TError,{data: V3CheckRelationRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3CheckRelationHook>>>, TError,{data: V3CheckRelationRequest}, TContext> => {
    
const mutationKey = ['directoryReaderV3CheckRelation'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const directoryReaderV3CheckRelation =  useDirectoryReaderV3CheckRelationHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3CheckRelationHook>>>, {data: V3CheckRelationRequest}> = (props) => {
          const {data} = props ?? {};

          return  directoryReaderV3CheckRelation(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DirectoryReaderV3CheckRelationMutationBody = V3CheckRelationRequest
    export type DirectoryReaderV3CheckRelationMutationError = RpcStatus
    export type DirectoryReaderV3CheckRelationMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3CheckRelationHook>>>>

    /**
 * @deprecated
 * @summary Check relation
 */
export const useDirectoryReaderV3CheckRelation = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3CheckRelationHook>>>, TError,{data: V3CheckRelationRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3CheckRelationHook>>>,
        TError,
        {data: V3CheckRelationRequest},
        TContext
      > => {

      const mutationOptions = useDirectoryReaderV3CheckRelationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Returns multiple check outcomes.
 * @summary Checks
 */
export const useDirectoryReaderV3ChecksHook = () => {
        const directoryReaderV3Checks = useDirectoryReaderClient<V3ChecksResponse>();

        return useCallback((
    v3ChecksRequest: V3ChecksRequest,
 signal?: AbortSignal
) => {
        return directoryReaderV3Checks(
          {data: v3ChecksRequest, headers: {'Content-Type': 'application/json', },
      method: 'POST',
      signal, url: `/api/v3/directory/checks`
    },
          );
        }, [directoryReaderV3Checks])
      }
    


export const useDirectoryReaderV3ChecksMutationOptions = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ChecksHook>>>, TError,{data: V3ChecksRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ChecksHook>>>, TError,{data: V3ChecksRequest}, TContext> => {
    
const mutationKey = ['directoryReaderV3Checks'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const directoryReaderV3Checks =  useDirectoryReaderV3ChecksHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ChecksHook>>>, {data: V3ChecksRequest}> = (props) => {
          const {data} = props ?? {};

          return  directoryReaderV3Checks(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DirectoryReaderV3ChecksMutationBody = V3ChecksRequest
    export type DirectoryReaderV3ChecksMutationError = RpcStatus
    export type DirectoryReaderV3ChecksMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ChecksHook>>>>

    /**
 * @summary Checks
 */
export const useDirectoryReaderV3Checks = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ChecksHook>>>, TError,{data: V3ChecksRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ChecksHook>>>,
        TError,
        {data: V3ChecksRequest},
        TContext
      > => {

      const mutationOptions = useDirectoryReaderV3ChecksMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Returns object graph from anchor to subject or object.
 * @summary Get graph
 */
export const useDirectoryReaderV3GraphHook = () => {
        const directoryReaderV3Graph = useDirectoryReaderClient<V3GetGraphResponse>();

        return useCallback((
    objectType: string,
    relation: string,
    subjectType: string,
    params?: DirectoryReaderV3GraphParams,
 signal?: AbortSignal
) => {
        return directoryReaderV3Graph(
          {method: 'GET', params,
        signal, url: `/api/v3/directory/graph/${objectType}/${relation}/${subjectType}`
    },
          );
        }, [directoryReaderV3Graph])
      }
    

export const getDirectoryReaderV3GraphQueryKey = (objectType: string,
    relation: string,
    subjectType: string,
    params?: DirectoryReaderV3GraphParams,) => {
    return [`/api/v3/directory/graph/${objectType}/${relation}/${subjectType}`, ...(params ? [params]: [])] as const;
    }

    
export const useDirectoryReaderV3GraphQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3GraphHook>>>, TError = RpcStatus>(objectType: string,
    relation: string,
    subjectType: string,
    params?: DirectoryReaderV3GraphParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3GraphHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDirectoryReaderV3GraphQueryKey(objectType,relation,subjectType,params);

  const directoryReaderV3Graph =  useDirectoryReaderV3GraphHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3GraphHook>>>> = ({ signal }) => directoryReaderV3Graph(objectType,relation,subjectType,params, signal);

      

      

   return  { enabled: !!(objectType && relation && subjectType), queryFn, queryKey, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3GraphHook>>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DirectoryReaderV3GraphQueryError = RpcStatus
export type DirectoryReaderV3GraphQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3GraphHook>>>>


export function useDirectoryReaderV3Graph<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3GraphHook>>>, TError = RpcStatus>(
 objectType: string,
    relation: string,
    subjectType: string,
    params: DirectoryReaderV3GraphParams |  undefined, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3GraphHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3GraphHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3GraphHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryReaderV3Graph<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3GraphHook>>>, TError = RpcStatus>(
 objectType: string,
    relation: string,
    subjectType: string,
    params?: DirectoryReaderV3GraphParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3GraphHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3GraphHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3GraphHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryReaderV3Graph<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3GraphHook>>>, TError = RpcStatus>(
 objectType: string,
    relation: string,
    subjectType: string,
    params?: DirectoryReaderV3GraphParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3GraphHook>>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get graph
 */

export function useDirectoryReaderV3Graph<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3GraphHook>>>, TError = RpcStatus>(
 objectType: string,
    relation: string,
    subjectType: string,
    params?: DirectoryReaderV3GraphParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3GraphHook>>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useDirectoryReaderV3GraphQueryOptions(objectType,relation,subjectType,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Delete manifest.
 * @summary Delete manifest
 */
export const useDirectoryModelV3ManifestDeleteHook = () => {
        const directoryModelV3ManifestDelete = useDirectoryModelClient<V3DeleteManifestResponse>();

        return useCallback((
    params?: DirectoryModelV3ManifestDeleteParams,
 ) => {
        return directoryModelV3ManifestDelete(
          {method: 'DELETE', params,
        url: `/api/v3/directory/manifest`
    },
          );
        }, [directoryModelV3ManifestDelete])
      }
    


export const useDirectoryModelV3ManifestDeleteMutationOptions = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestDeleteHook>>>, TError,{params?: DirectoryModelV3ManifestDeleteParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestDeleteHook>>>, TError,{params?: DirectoryModelV3ManifestDeleteParams}, TContext> => {
    
const mutationKey = ['directoryModelV3ManifestDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const directoryModelV3ManifestDelete =  useDirectoryModelV3ManifestDeleteHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestDeleteHook>>>, {params?: DirectoryModelV3ManifestDeleteParams}> = (props) => {
          const {params} = props ?? {};

          return  directoryModelV3ManifestDelete(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DirectoryModelV3ManifestDeleteMutationError = RpcStatus
    
    export type DirectoryModelV3ManifestDeleteMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestDeleteHook>>>>

    /**
 * @summary Delete manifest
 */
export const useDirectoryModelV3ManifestDelete = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestDeleteHook>>>, TError,{params?: DirectoryModelV3ManifestDeleteParams}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestDeleteHook>>>,
        TError,
        {params?: DirectoryModelV3ManifestDeleteParams},
        TContext
      > => {

      const mutationOptions = useDirectoryModelV3ManifestDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get manifest.
 * @summary Get manifest
 */
export const useDirectoryModelV3ManifestGetHook = () => {
        const directoryModelV3ManifestGet = useDirectoryReaderClient<Blob>();

        return useCallback((
    
 signal?: AbortSignal
) => {
        return directoryModelV3ManifestGet(
          {method: 'GET', responseType: 'blob',
        signal, url: `/api/v3/directory/manifest`
    },
          );
        }, [directoryModelV3ManifestGet])
      }
    

export const getDirectoryModelV3ManifestGetQueryKey = () => {
    return [`/api/v3/directory/manifest`] as const;
    }

    
export const useDirectoryModelV3ManifestGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetHook>>>, TError = RpcStatus | void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDirectoryModelV3ManifestGetQueryKey();

  const directoryModelV3ManifestGet =  useDirectoryModelV3ManifestGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetHook>>>> = ({ signal }) => directoryModelV3ManifestGet(signal);

      

      

   return  { queryFn, queryKey, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetHook>>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DirectoryModelV3ManifestGetQueryError = RpcStatus | void
export type DirectoryModelV3ManifestGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetHook>>>>


export function useDirectoryModelV3ManifestGet<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetHook>>>, TError = RpcStatus | void>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryModelV3ManifestGet<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetHook>>>, TError = RpcStatus | void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryModelV3ManifestGet<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetHook>>>, TError = RpcStatus | void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetHook>>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get manifest
 */

export function useDirectoryModelV3ManifestGet<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetHook>>>, TError = RpcStatus | void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetHook>>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useDirectoryModelV3ManifestGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get manifest metadata.
 * @summary Get manifest metadata
 */
export const useDirectoryModelV3ManifestGetMetadataHook = () => {
        const directoryModelV3ManifestGetMetadata = useDirectoryReaderClient<void>();

        return useCallback((
    
 signal?: AbortSignal
) => {
        return directoryModelV3ManifestGetMetadata(
          {method: 'HEAD', signal, url: `/api/v3/directory/manifest`
    },
          );
        }, [directoryModelV3ManifestGetMetadata])
      }
    


export const useDirectoryModelV3ManifestGetMetadataMutationOptions = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetMetadataHook>>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetMetadataHook>>>, TError,void, TContext> => {
    
const mutationKey = ['directoryModelV3ManifestGetMetadata'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const directoryModelV3ManifestGetMetadata =  useDirectoryModelV3ManifestGetMetadataHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetMetadataHook>>>, void> = () => {
          

          return  directoryModelV3ManifestGetMetadata()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DirectoryModelV3ManifestGetMetadataMutationError = RpcStatus
    
    export type DirectoryModelV3ManifestGetMetadataMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetMetadataHook>>>>

    /**
 * @summary Get manifest metadata
 */
export const useDirectoryModelV3ManifestGetMetadata = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetMetadataHook>>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestGetMetadataHook>>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = useDirectoryModelV3ManifestGetMetadataMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Set manifest.
 * @summary Set manifest
 */
export const useDirectoryModelV3ManifestSetHook = () => {
        const directoryModelV3ManifestSet = useDirectoryReaderClient<V3SetManifestResponse>();

        return useCallback((
    directoryModelV3ManifestSetBody: Blob,
 signal?: AbortSignal
) => {
        return directoryModelV3ManifestSet(
          {data: directoryModelV3ManifestSetBody, headers: {'Content-Type': 'application/yaml', },
      method: 'POST',
      signal, url: `/api/v3/directory/manifest`
    },
          );
        }, [directoryModelV3ManifestSet])
      }
    


export const useDirectoryModelV3ManifestSetMutationOptions = <TError = RpcStatus | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestSetHook>>>, TError,{data: Blob}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestSetHook>>>, TError,{data: Blob}, TContext> => {
    
const mutationKey = ['directoryModelV3ManifestSet'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const directoryModelV3ManifestSet =  useDirectoryModelV3ManifestSetHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestSetHook>>>, {data: Blob}> = (props) => {
          const {data} = props ?? {};

          return  directoryModelV3ManifestSet(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DirectoryModelV3ManifestSetMutationBody = Blob
    export type DirectoryModelV3ManifestSetMutationError = RpcStatus | void
    export type DirectoryModelV3ManifestSetMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestSetHook>>>>

    /**
 * @summary Set manifest
 */
export const useDirectoryModelV3ManifestSet = <TError = RpcStatus | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestSetHook>>>, TError,{data: Blob}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useDirectoryModelV3ManifestSetHook>>>,
        TError,
        {data: Blob},
        TContext
      > => {

      const mutationOptions = useDirectoryModelV3ManifestSetMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Set object.
 * @summary Set object
 */
export const useDirectoryWriterV3ObjectSetHook = () => {
        const directoryWriterV3ObjectSet = useDirectoryWriterClient<V3SetObjectResponse>();

        return useCallback((
    v3SetObjectRequest: V3SetObjectRequest,
 signal?: AbortSignal
) => {
        return directoryWriterV3ObjectSet(
          {data: v3SetObjectRequest, headers: {'Content-Type': 'application/json', },
      method: 'POST',
      signal, url: `/api/v3/directory/object`
    },
          );
        }, [directoryWriterV3ObjectSet])
      }
    


export const useDirectoryWriterV3ObjectSetMutationOptions = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3ObjectSetHook>>>, TError,{data: V3SetObjectRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3ObjectSetHook>>>, TError,{data: V3SetObjectRequest}, TContext> => {
    
const mutationKey = ['directoryWriterV3ObjectSet'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const directoryWriterV3ObjectSet =  useDirectoryWriterV3ObjectSetHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3ObjectSetHook>>>, {data: V3SetObjectRequest}> = (props) => {
          const {data} = props ?? {};

          return  directoryWriterV3ObjectSet(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DirectoryWriterV3ObjectSetMutationBody = V3SetObjectRequest
    export type DirectoryWriterV3ObjectSetMutationError = RpcStatus
    export type DirectoryWriterV3ObjectSetMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3ObjectSetHook>>>>

    /**
 * @summary Set object
 */
export const useDirectoryWriterV3ObjectSet = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3ObjectSetHook>>>, TError,{data: V3SetObjectRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3ObjectSetHook>>>,
        TError,
        {data: V3SetObjectRequest},
        TContext
      > => {

      const mutationOptions = useDirectoryWriterV3ObjectSetMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Delete object.
 * @summary Delete object
 */
export const useDirectoryWriterV3ObjectDeleteHook = () => {
        const directoryWriterV3ObjectDelete = useDirectoryWriterClient<V3DeleteObjectResponse>();

        return useCallback((
    objectType: string,
    objectId: string,
    params?: DirectoryWriterV3ObjectDeleteParams,
 ) => {
        return directoryWriterV3ObjectDelete(
          {method: 'DELETE', params,
        url: `/api/v3/directory/object/${objectType}/${objectId}`
    },
          );
        }, [directoryWriterV3ObjectDelete])
      }
    


export const useDirectoryWriterV3ObjectDeleteMutationOptions = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3ObjectDeleteHook>>>, TError,{objectId: string;objectType: string;params?: DirectoryWriterV3ObjectDeleteParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3ObjectDeleteHook>>>, TError,{objectId: string;objectType: string;params?: DirectoryWriterV3ObjectDeleteParams}, TContext> => {
    
const mutationKey = ['directoryWriterV3ObjectDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const directoryWriterV3ObjectDelete =  useDirectoryWriterV3ObjectDeleteHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3ObjectDeleteHook>>>, {objectId: string;objectType: string;params?: DirectoryWriterV3ObjectDeleteParams}> = (props) => {
          const {objectId,objectType,params} = props ?? {};

          return  directoryWriterV3ObjectDelete(objectType,objectId,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DirectoryWriterV3ObjectDeleteMutationError = RpcStatus
    
    export type DirectoryWriterV3ObjectDeleteMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3ObjectDeleteHook>>>>

    /**
 * @summary Delete object
 */
export const useDirectoryWriterV3ObjectDelete = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3ObjectDeleteHook>>>, TError,{objectId: string;objectType: string;params?: DirectoryWriterV3ObjectDeleteParams}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3ObjectDeleteHook>>>,
        TError,
        {objectId: string;objectType: string;params?: DirectoryWriterV3ObjectDeleteParams},
        TContext
      > => {

      const mutationOptions = useDirectoryWriterV3ObjectDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Returns single object instance, optionally with relations.
 * @summary Get object instance
 */
export const useDirectoryReaderV3ObjectGetHook = () => {
        const directoryReaderV3ObjectGet = useDirectoryReaderClient<V3GetObjectResponse>();

        return useCallback((
    objectType: string,
    objectId: string,
    params?: DirectoryReaderV3ObjectGetParams,
 signal?: AbortSignal
) => {
        return directoryReaderV3ObjectGet(
          {method: 'GET', params,
        signal, url: `/api/v3/directory/object/${objectType}/${objectId}`
    },
          );
        }, [directoryReaderV3ObjectGet])
      }
    

export const getDirectoryReaderV3ObjectGetQueryKey = (objectType: string,
    objectId: string,
    params?: DirectoryReaderV3ObjectGetParams,) => {
    return [`/api/v3/directory/object/${objectType}/${objectId}`, ...(params ? [params]: [])] as const;
    }

    
export const useDirectoryReaderV3ObjectGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectGetHook>>>, TError = RpcStatus | unknown>(objectType: string,
    objectId: string,
    params?: DirectoryReaderV3ObjectGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectGetHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDirectoryReaderV3ObjectGetQueryKey(objectType,objectId,params);

  const directoryReaderV3ObjectGet =  useDirectoryReaderV3ObjectGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectGetHook>>>> = ({ signal }) => directoryReaderV3ObjectGet(objectType,objectId,params, signal);

      

      

   return  { enabled: !!(objectType && objectId), queryFn, queryKey, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectGetHook>>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DirectoryReaderV3ObjectGetQueryError = RpcStatus | unknown
export type DirectoryReaderV3ObjectGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectGetHook>>>>


export function useDirectoryReaderV3ObjectGet<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectGetHook>>>, TError = RpcStatus | unknown>(
 objectType: string,
    objectId: string,
    params: DirectoryReaderV3ObjectGetParams |  undefined, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectGetHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectGetHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectGetHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryReaderV3ObjectGet<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectGetHook>>>, TError = RpcStatus | unknown>(
 objectType: string,
    objectId: string,
    params?: DirectoryReaderV3ObjectGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectGetHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectGetHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectGetHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryReaderV3ObjectGet<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectGetHook>>>, TError = RpcStatus | unknown>(
 objectType: string,
    objectId: string,
    params?: DirectoryReaderV3ObjectGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectGetHook>>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get object instance
 */

export function useDirectoryReaderV3ObjectGet<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectGetHook>>>, TError = RpcStatus | unknown>(
 objectType: string,
    objectId: string,
    params?: DirectoryReaderV3ObjectGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectGetHook>>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useDirectoryReaderV3ObjectGetQueryOptions(objectType,objectId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns list of object instances.
 * @summary List object instances
 */
export const useDirectoryReaderV3ObjectsListHook = () => {
        const directoryReaderV3ObjectsList = useDirectoryReaderClient<V3GetObjectsResponse>();

        return useCallback((
    params?: DirectoryReaderV3ObjectsListParams,
 signal?: AbortSignal
) => {
        return directoryReaderV3ObjectsList(
          {method: 'GET', params,
        signal, url: `/api/v3/directory/objects`
    },
          );
        }, [directoryReaderV3ObjectsList])
      }
    

export const getDirectoryReaderV3ObjectsListQueryKey = (params?: DirectoryReaderV3ObjectsListParams,) => {
    return [`/api/v3/directory/objects`, ...(params ? [params]: [])] as const;
    }

    
export const useDirectoryReaderV3ObjectsListInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, DirectoryReaderV3ObjectsListParams['page.token']>, TError = RpcStatus>(params?: DirectoryReaderV3ObjectsListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, TError, TData, Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, QueryKey, DirectoryReaderV3ObjectsListParams['page.token']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDirectoryReaderV3ObjectsListQueryKey(params);

  const directoryReaderV3ObjectsList =  useDirectoryReaderV3ObjectsListHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, QueryKey, DirectoryReaderV3ObjectsListParams['page.token']> = ({ pageParam, signal }) => directoryReaderV3ObjectsList({...params, 'page.token': pageParam || params?.['page.token']}, signal);

      

      

   return  { queryFn, queryKey, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, TError, TData, Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, QueryKey, DirectoryReaderV3ObjectsListParams['page.token']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DirectoryReaderV3ObjectsListInfiniteQueryError = RpcStatus
export type DirectoryReaderV3ObjectsListInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>>


export function useDirectoryReaderV3ObjectsListInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, DirectoryReaderV3ObjectsListParams['page.token']>, TError = RpcStatus>(
 params: DirectoryReaderV3ObjectsListParams |  undefined, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, TError, TData, Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, QueryKey, DirectoryReaderV3ObjectsListParams['page.token']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryReaderV3ObjectsListInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, DirectoryReaderV3ObjectsListParams['page.token']>, TError = RpcStatus>(
 params?: DirectoryReaderV3ObjectsListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, TError, TData, Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, QueryKey, DirectoryReaderV3ObjectsListParams['page.token']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryReaderV3ObjectsListInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, DirectoryReaderV3ObjectsListParams['page.token']>, TError = RpcStatus>(
 params?: DirectoryReaderV3ObjectsListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, TError, TData, Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, QueryKey, DirectoryReaderV3ObjectsListParams['page.token']>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List object instances
 */

export function useDirectoryReaderV3ObjectsListInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, DirectoryReaderV3ObjectsListParams['page.token']>, TError = RpcStatus>(
 params?: DirectoryReaderV3ObjectsListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, TError, TData, Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, QueryKey, DirectoryReaderV3ObjectsListParams['page.token']>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useDirectoryReaderV3ObjectsListInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useDirectoryReaderV3ObjectsListQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, TError = RpcStatus>(params?: DirectoryReaderV3ObjectsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDirectoryReaderV3ObjectsListQueryKey(params);

  const directoryReaderV3ObjectsList =  useDirectoryReaderV3ObjectsListHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>> = ({ signal }) => directoryReaderV3ObjectsList(params, signal);

      

      

   return  { queryFn, queryKey, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DirectoryReaderV3ObjectsListQueryError = RpcStatus
export type DirectoryReaderV3ObjectsListQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>>


export function useDirectoryReaderV3ObjectsList<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, TError = RpcStatus>(
 params: DirectoryReaderV3ObjectsListParams |  undefined, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryReaderV3ObjectsList<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, TError = RpcStatus>(
 params?: DirectoryReaderV3ObjectsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryReaderV3ObjectsList<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, TError = RpcStatus>(
 params?: DirectoryReaderV3ObjectsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List object instances
 */

export function useDirectoryReaderV3ObjectsList<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, TError = RpcStatus>(
 params?: DirectoryReaderV3ObjectsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3ObjectsListHook>>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useDirectoryReaderV3ObjectsListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Delete relation.
 * @summary Delete relation
 */
export const useDirectoryWriterV3RelationDeleteHook = () => {
        const directoryWriterV3RelationDelete = useDirectoryWriterClient<V3DeleteRelationResponse>();

        return useCallback((
    params: DirectoryWriterV3RelationDeleteParams,
 ) => {
        return directoryWriterV3RelationDelete(
          {method: 'DELETE', params,
        url: `/api/v3/directory/relation`
    },
          );
        }, [directoryWriterV3RelationDelete])
      }
    


export const useDirectoryWriterV3RelationDeleteMutationOptions = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3RelationDeleteHook>>>, TError,{params: DirectoryWriterV3RelationDeleteParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3RelationDeleteHook>>>, TError,{params: DirectoryWriterV3RelationDeleteParams}, TContext> => {
    
const mutationKey = ['directoryWriterV3RelationDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const directoryWriterV3RelationDelete =  useDirectoryWriterV3RelationDeleteHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3RelationDeleteHook>>>, {params: DirectoryWriterV3RelationDeleteParams}> = (props) => {
          const {params} = props ?? {};

          return  directoryWriterV3RelationDelete(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DirectoryWriterV3RelationDeleteMutationError = RpcStatus
    
    export type DirectoryWriterV3RelationDeleteMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3RelationDeleteHook>>>>

    /**
 * @summary Delete relation
 */
export const useDirectoryWriterV3RelationDelete = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3RelationDeleteHook>>>, TError,{params: DirectoryWriterV3RelationDeleteParams}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3RelationDeleteHook>>>,
        TError,
        {params: DirectoryWriterV3RelationDeleteParams},
        TContext
      > => {

      const mutationOptions = useDirectoryWriterV3RelationDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Returns single relation instance, optionally with objects.
 * @summary Get relation instance
 */
export const useDirectoryReaderV3RelationGetHook = () => {
        const directoryReaderV3RelationGet = useDirectoryReaderClient<V3GetRelationResponse>();

        return useCallback((
    params: DirectoryReaderV3RelationGetParams,
 signal?: AbortSignal
) => {
        return directoryReaderV3RelationGet(
          {method: 'GET', params,
        signal, url: `/api/v3/directory/relation`
    },
          );
        }, [directoryReaderV3RelationGet])
      }
    

export const getDirectoryReaderV3RelationGetQueryKey = (params: DirectoryReaderV3RelationGetParams,) => {
    return [`/api/v3/directory/relation`, ...(params ? [params]: [])] as const;
    }

    
export const useDirectoryReaderV3RelationGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationGetHook>>>, TError = RpcStatus | unknown>(params: DirectoryReaderV3RelationGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationGetHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDirectoryReaderV3RelationGetQueryKey(params);

  const directoryReaderV3RelationGet =  useDirectoryReaderV3RelationGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationGetHook>>>> = ({ signal }) => directoryReaderV3RelationGet(params, signal);

      

      

   return  { queryFn, queryKey, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationGetHook>>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DirectoryReaderV3RelationGetQueryError = RpcStatus | unknown
export type DirectoryReaderV3RelationGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationGetHook>>>>


export function useDirectoryReaderV3RelationGet<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationGetHook>>>, TError = RpcStatus | unknown>(
 params: DirectoryReaderV3RelationGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationGetHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationGetHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationGetHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryReaderV3RelationGet<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationGetHook>>>, TError = RpcStatus | unknown>(
 params: DirectoryReaderV3RelationGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationGetHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationGetHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationGetHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryReaderV3RelationGet<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationGetHook>>>, TError = RpcStatus | unknown>(
 params: DirectoryReaderV3RelationGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationGetHook>>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get relation instance
 */

export function useDirectoryReaderV3RelationGet<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationGetHook>>>, TError = RpcStatus | unknown>(
 params: DirectoryReaderV3RelationGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationGetHook>>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useDirectoryReaderV3RelationGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Set relation.
 * @summary Set relation
 */
export const useDirectoryWriterV3RelationSetHook = () => {
        const directoryWriterV3RelationSet = useDirectoryWriterClient<V3SetRelationResponse>();

        return useCallback((
    v3SetRelationRequest: V3SetRelationRequest,
 signal?: AbortSignal
) => {
        return directoryWriterV3RelationSet(
          {data: v3SetRelationRequest, headers: {'Content-Type': 'application/json', },
      method: 'POST',
      signal, url: `/api/v3/directory/relation`
    },
          );
        }, [directoryWriterV3RelationSet])
      }
    


export const useDirectoryWriterV3RelationSetMutationOptions = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3RelationSetHook>>>, TError,{data: V3SetRelationRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3RelationSetHook>>>, TError,{data: V3SetRelationRequest}, TContext> => {
    
const mutationKey = ['directoryWriterV3RelationSet'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const directoryWriterV3RelationSet =  useDirectoryWriterV3RelationSetHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3RelationSetHook>>>, {data: V3SetRelationRequest}> = (props) => {
          const {data} = props ?? {};

          return  directoryWriterV3RelationSet(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DirectoryWriterV3RelationSetMutationBody = V3SetRelationRequest
    export type DirectoryWriterV3RelationSetMutationError = RpcStatus
    export type DirectoryWriterV3RelationSetMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3RelationSetHook>>>>

    /**
 * @summary Set relation
 */
export const useDirectoryWriterV3RelationSet = <TError = RpcStatus,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3RelationSetHook>>>, TError,{data: V3SetRelationRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useDirectoryWriterV3RelationSetHook>>>,
        TError,
        {data: V3SetRelationRequest},
        TContext
      > => {

      const mutationOptions = useDirectoryWriterV3RelationSetMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Returns list of relation instances.
 * @summary List relations instances
 */
export const useDirectoryReaderV3RelationsListHook = () => {
        const directoryReaderV3RelationsList = useDirectoryReaderClient<V3GetRelationsResponse>();

        return useCallback((
    params?: DirectoryReaderV3RelationsListParams,
 signal?: AbortSignal
) => {
        return directoryReaderV3RelationsList(
          {method: 'GET', params,
        signal, url: `/api/v3/directory/relations`
    },
          );
        }, [directoryReaderV3RelationsList])
      }
    

export const getDirectoryReaderV3RelationsListQueryKey = (params?: DirectoryReaderV3RelationsListParams,) => {
    return [`/api/v3/directory/relations`, ...(params ? [params]: [])] as const;
    }

    
export const useDirectoryReaderV3RelationsListInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, DirectoryReaderV3RelationsListParams['page.token']>, TError = RpcStatus>(params?: DirectoryReaderV3RelationsListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, TError, TData, Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, QueryKey, DirectoryReaderV3RelationsListParams['page.token']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDirectoryReaderV3RelationsListQueryKey(params);

  const directoryReaderV3RelationsList =  useDirectoryReaderV3RelationsListHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, QueryKey, DirectoryReaderV3RelationsListParams['page.token']> = ({ pageParam, signal }) => directoryReaderV3RelationsList({...params, 'page.token': pageParam || params?.['page.token']}, signal);

      

      

   return  { queryFn, queryKey, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, TError, TData, Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, QueryKey, DirectoryReaderV3RelationsListParams['page.token']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DirectoryReaderV3RelationsListInfiniteQueryError = RpcStatus
export type DirectoryReaderV3RelationsListInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>>


export function useDirectoryReaderV3RelationsListInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, DirectoryReaderV3RelationsListParams['page.token']>, TError = RpcStatus>(
 params: DirectoryReaderV3RelationsListParams |  undefined, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, TError, TData, Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, QueryKey, DirectoryReaderV3RelationsListParams['page.token']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryReaderV3RelationsListInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, DirectoryReaderV3RelationsListParams['page.token']>, TError = RpcStatus>(
 params?: DirectoryReaderV3RelationsListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, TError, TData, Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, QueryKey, DirectoryReaderV3RelationsListParams['page.token']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryReaderV3RelationsListInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, DirectoryReaderV3RelationsListParams['page.token']>, TError = RpcStatus>(
 params?: DirectoryReaderV3RelationsListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, TError, TData, Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, QueryKey, DirectoryReaderV3RelationsListParams['page.token']>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List relations instances
 */

export function useDirectoryReaderV3RelationsListInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, DirectoryReaderV3RelationsListParams['page.token']>, TError = RpcStatus>(
 params?: DirectoryReaderV3RelationsListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, TError, TData, Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, QueryKey, DirectoryReaderV3RelationsListParams['page.token']>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useDirectoryReaderV3RelationsListInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useDirectoryReaderV3RelationsListQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, TError = RpcStatus>(params?: DirectoryReaderV3RelationsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDirectoryReaderV3RelationsListQueryKey(params);

  const directoryReaderV3RelationsList =  useDirectoryReaderV3RelationsListHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>> = ({ signal }) => directoryReaderV3RelationsList(params, signal);

      

      

   return  { queryFn, queryKey, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DirectoryReaderV3RelationsListQueryError = RpcStatus
export type DirectoryReaderV3RelationsListQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>>


export function useDirectoryReaderV3RelationsList<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, TError = RpcStatus>(
 params: DirectoryReaderV3RelationsListParams |  undefined, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryReaderV3RelationsList<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, TError = RpcStatus>(
 params?: DirectoryReaderV3RelationsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDirectoryReaderV3RelationsList<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, TError = RpcStatus>(
 params?: DirectoryReaderV3RelationsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List relations instances
 */

export function useDirectoryReaderV3RelationsList<TData = Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, TError = RpcStatus>(
 params?: DirectoryReaderV3RelationsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDirectoryReaderV3RelationsListHook>>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useDirectoryReaderV3RelationsListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
