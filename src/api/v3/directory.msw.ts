import {
  delay,
  http,
  HttpResponse
} from 'msw';

/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Directory
 * Directory service
 * OpenAPI spec version: v0.33.5
 */
import {
  faker
} from '@faker-js/faker';

import type {
  V1ActionSearchResponse,
  V1EvaluationResponse,
  V1EvaluationsResponse,
  V1ResourceSearchResponse,
  V1SubjectSearchResponse,
  V3CheckPermissionResponse,
  V3CheckRelationResponse,
  V3CheckResponse,
  V3ChecksResponse,
  V3DeleteAssertionResponse,
  V3DeleteManifestResponse,
  V3DeleteObjectResponse,
  V3DeleteRelationResponse,
  V3GetAssertionResponse,
  V3GetGraphResponse,
  V3GetObjectResponse,
  V3GetObjectsResponse,
  V3GetRelationResponse,
  V3GetRelationsResponse,
  V3ListAssertionsResponse,
  V3SetAssertionResponse,
  V3SetManifestResponse,
  V3SetObjectResponse,
  V3SetRelationResponse
} from '../../types/directory';


export const getOpenidAuthzenAccessV1EvaluationPostResponseMock = (overrideResponse: Partial< V1EvaluationResponse > = {}): V1EvaluationResponse => ({context: faker.helpers.arrayElement([{}, undefined]), decision: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse})

export const getOpenidAuthzenAccessV1EvaluationsPostResponseMock = (overrideResponse: Partial< V1EvaluationsResponse > = {}): V1EvaluationsResponse => ({decisions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => ({context: faker.helpers.arrayElement([{}, undefined]), decision: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), ...overrideResponse})

export const getOpenidAuthzenAccessV1SearchActionPostResponseMock = (overrideResponse: Partial< V1ActionSearchResponse > = {}): V1ActionSearchResponse => ({page: faker.helpers.arrayElement([{next_token: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined])}, undefined]), results: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => ({name: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), properties: faker.helpers.arrayElement([{}, undefined])})), undefined]), ...overrideResponse})

export const getOpenidAuthzenAccessV1SearchPostResponseMock = (overrideResponse: Partial< V1ResourceSearchResponse > = {}): V1ResourceSearchResponse => ({page: faker.helpers.arrayElement([{next_token: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined])}, undefined]), results: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), properties: faker.helpers.arrayElement([{}, undefined]), type: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined])})), undefined]), ...overrideResponse})

export const getOpenidAuthzenAccessV1SearchSubjectPostResponseMock = (overrideResponse: Partial< V1SubjectSearchResponse > = {}): V1SubjectSearchResponse => ({page: faker.helpers.arrayElement([{next_token: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined])}, undefined]), results: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), properties: faker.helpers.arrayElement([{}, undefined]), type: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined])})), undefined]), ...overrideResponse})

export const getDirectoryAssertionV3AssertionSetResponseMock = (overrideResponse: Partial< V3SetAssertionResponse > = {}): V3SetAssertionResponse => ({result: faker.helpers.arrayElement([{check: faker.helpers.arrayElement([{object_id: faker.string.alpha({length: {max: 20, min: 10}}), object_type: faker.string.alpha({length: {max: 20, min: 10}}), relation: faker.string.alpha({length: {max: 20, min: 10}}), subject_id: faker.string.alpha({length: {max: 20, min: 10}}), subject_type: faker.string.alpha({length: {max: 20, min: 10}}), trace: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), check_permission: faker.helpers.arrayElement([{object_id: faker.string.alpha({length: {max: 20, min: 10}}), object_type: faker.string.alpha({length: {max: 20, min: 10}}), permission: faker.string.alpha({length: {max: 20, min: 10}}), subject_id: faker.string.alpha({length: {max: 20, min: 10}}), subject_type: faker.string.alpha({length: {max: 20, min: 10}}), trace: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), check_relation: faker.helpers.arrayElement([{object_id: faker.string.alpha({length: {max: 20, min: 10}}), object_type: faker.string.alpha({length: {max: 20, min: 10}}), relation: faker.string.alpha({length: {max: 20, min: 10}}), subject_id: faker.string.alpha({length: {max: 20, min: 10}}), subject_type: faker.string.alpha({length: {max: 20, min: 10}}), trace: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), description: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), expected: faker.datatype.boolean(), id: faker.helpers.arrayElement([faker.number.int({max: undefined, min: undefined, multipleOf: undefined}), undefined])}, undefined]), ...overrideResponse})

export const getDirectoryAssertionV3AssertionDeleteResponseMock = (overrideResponse: Partial< V3DeleteAssertionResponse > = {}): V3DeleteAssertionResponse => ({result: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse})

export const getDirectoryAssertionV3AssertionGetResponseMock = (overrideResponse: Partial< V3GetAssertionResponse > = {}): V3GetAssertionResponse => ({result: faker.helpers.arrayElement([{check: faker.helpers.arrayElement([{object_id: faker.string.alpha({length: {max: 20, min: 10}}), object_type: faker.string.alpha({length: {max: 20, min: 10}}), relation: faker.string.alpha({length: {max: 20, min: 10}}), subject_id: faker.string.alpha({length: {max: 20, min: 10}}), subject_type: faker.string.alpha({length: {max: 20, min: 10}}), trace: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), check_permission: faker.helpers.arrayElement([{object_id: faker.string.alpha({length: {max: 20, min: 10}}), object_type: faker.string.alpha({length: {max: 20, min: 10}}), permission: faker.string.alpha({length: {max: 20, min: 10}}), subject_id: faker.string.alpha({length: {max: 20, min: 10}}), subject_type: faker.string.alpha({length: {max: 20, min: 10}}), trace: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), check_relation: faker.helpers.arrayElement([{object_id: faker.string.alpha({length: {max: 20, min: 10}}), object_type: faker.string.alpha({length: {max: 20, min: 10}}), relation: faker.string.alpha({length: {max: 20, min: 10}}), subject_id: faker.string.alpha({length: {max: 20, min: 10}}), subject_type: faker.string.alpha({length: {max: 20, min: 10}}), trace: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), description: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), expected: faker.datatype.boolean(), id: faker.helpers.arrayElement([faker.number.int({max: undefined, min: undefined, multipleOf: undefined}), undefined])}, undefined]), ...overrideResponse})

export const getDirectoryAssertionV3AssertionsListResponseMock = (overrideResponse: Partial< V3ListAssertionsResponse > = {}): V3ListAssertionsResponse => ({page: faker.helpers.arrayElement([{next_token: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined])}, undefined]), results: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => ({check: faker.helpers.arrayElement([{object_id: faker.string.alpha({length: {max: 20, min: 10}}), object_type: faker.string.alpha({length: {max: 20, min: 10}}), relation: faker.string.alpha({length: {max: 20, min: 10}}), subject_id: faker.string.alpha({length: {max: 20, min: 10}}), subject_type: faker.string.alpha({length: {max: 20, min: 10}}), trace: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), check_permission: faker.helpers.arrayElement([{object_id: faker.string.alpha({length: {max: 20, min: 10}}), object_type: faker.string.alpha({length: {max: 20, min: 10}}), permission: faker.string.alpha({length: {max: 20, min: 10}}), subject_id: faker.string.alpha({length: {max: 20, min: 10}}), subject_type: faker.string.alpha({length: {max: 20, min: 10}}), trace: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), check_relation: faker.helpers.arrayElement([{object_id: faker.string.alpha({length: {max: 20, min: 10}}), object_type: faker.string.alpha({length: {max: 20, min: 10}}), relation: faker.string.alpha({length: {max: 20, min: 10}}), subject_id: faker.string.alpha({length: {max: 20, min: 10}}), subject_type: faker.string.alpha({length: {max: 20, min: 10}}), trace: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), description: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), expected: faker.datatype.boolean(), id: faker.helpers.arrayElement([faker.number.int({max: undefined, min: undefined, multipleOf: undefined}), undefined])})), undefined]), ...overrideResponse})

export const getDirectoryReaderV3CheckResponseMock = (overrideResponse: Partial< V3CheckResponse > = {}): V3CheckResponse => ({check: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), context: faker.helpers.arrayElement([{}, undefined]), trace: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {max: 20, min: 10}}))), undefined]), ...overrideResponse})

export const getDirectoryReaderV3CheckPermissionResponseMock = (overrideResponse: Partial< V3CheckPermissionResponse > = {}): V3CheckPermissionResponse => ({check: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), trace: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {max: 20, min: 10}}))), undefined]), ...overrideResponse})

export const getDirectoryReaderV3CheckRelationResponseMock = (overrideResponse: Partial< V3CheckRelationResponse > = {}): V3CheckRelationResponse => ({check: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), trace: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {max: 20, min: 10}}))), undefined]), ...overrideResponse})

export const getDirectoryReaderV3ChecksResponseMock = (overrideResponse: Partial< V3ChecksResponse > = {}): V3ChecksResponse => ({checks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => ({check: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), context: faker.helpers.arrayElement([{}, undefined]), trace: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {max: 20, min: 10}}))), undefined])})), undefined]), ...overrideResponse})

export const getDirectoryReaderV3GraphResponseMock = (overrideResponse: Partial< V3GetGraphResponse > = {}): V3GetGraphResponse => ({explanation: faker.helpers.arrayElement([{}, undefined]), results: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => ({object_id: faker.string.alpha({length: {max: 20, min: 10}}), object_type: faker.string.alpha({length: {max: 20, min: 10}})})), undefined]), trace: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {max: 20, min: 10}}))), undefined]), ...overrideResponse})

export const getDirectoryModelV3ManifestDeleteResponseMock = (overrideResponse: Partial< V3DeleteManifestResponse > = {}): V3DeleteManifestResponse => ({result: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse})

export const getDirectoryModelV3ManifestGetResponseMock = (): Blob => (new Blob(faker.helpers.arrayElements(faker.word.words(10).split(' '))))

export const getDirectoryModelV3ManifestSetResponseMock = (overrideResponse: Partial< V3SetManifestResponse > = {}): V3SetManifestResponse => ({result: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse})

export const getDirectoryWriterV3ObjectSetResponseMock = (overrideResponse: Partial< V3SetObjectResponse > = {}): V3SetObjectResponse => ({result: faker.helpers.arrayElement([{created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), display_name: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), etag: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), id: faker.string.alpha({length: {max: 20, min: 10}}), properties: faker.helpers.arrayElement([{}, undefined]), type: faker.string.alpha({length: {max: 20, min: 10}}), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])}, undefined]), ...overrideResponse})

export const getDirectoryWriterV3ObjectDeleteResponseMock = (overrideResponse: Partial< V3DeleteObjectResponse > = {}): V3DeleteObjectResponse => ({result: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse})

export const getDirectoryReaderV3ObjectGetResponseMock = (overrideResponse: Partial< V3GetObjectResponse > = {}): V3GetObjectResponse => ({page: faker.helpers.arrayElement([{next_token: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined])}, undefined]), relations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), etag: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), object_id: faker.string.alpha({length: {max: 20, min: 10}}), object_type: faker.string.alpha({length: {max: 20, min: 10}}), relation: faker.string.alpha({length: {max: 20, min: 10}}), subject_id: faker.string.alpha({length: {max: 20, min: 10}}), subject_relation: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), subject_type: faker.string.alpha({length: {max: 20, min: 10}}), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), result: faker.helpers.arrayElement([{created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), display_name: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), etag: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), id: faker.string.alpha({length: {max: 20, min: 10}}), properties: faker.helpers.arrayElement([{}, undefined]), type: faker.string.alpha({length: {max: 20, min: 10}}), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])}, undefined]), ...overrideResponse})

export const getDirectoryReaderV3ObjectsListResponseMock = (overrideResponse: Partial< V3GetObjectsResponse > = {}): V3GetObjectsResponse => ({page: faker.helpers.arrayElement([{next_token: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined])}, undefined]), results: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), display_name: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), etag: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), id: faker.string.alpha({length: {max: 20, min: 10}}), properties: faker.helpers.arrayElement([{}, undefined]), type: faker.string.alpha({length: {max: 20, min: 10}}), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), ...overrideResponse})

export const getDirectoryWriterV3RelationDeleteResponseMock = (overrideResponse: Partial< V3DeleteRelationResponse > = {}): V3DeleteRelationResponse => ({result: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse})

export const getDirectoryReaderV3RelationGetResponseMock = (overrideResponse: Partial< V3GetRelationResponse > = {}): V3GetRelationResponse => ({objects: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: {created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), display_name: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), etag: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), id: faker.string.alpha({length: {max: 20, min: 10}}), properties: faker.helpers.arrayElement([{}, undefined]), type: faker.string.alpha({length: {max: 20, min: 10}}), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])}
      }, undefined]), result: faker.helpers.arrayElement([{created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), etag: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), object_id: faker.string.alpha({length: {max: 20, min: 10}}), object_type: faker.string.alpha({length: {max: 20, min: 10}}), relation: faker.string.alpha({length: {max: 20, min: 10}}), subject_id: faker.string.alpha({length: {max: 20, min: 10}}), subject_relation: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), subject_type: faker.string.alpha({length: {max: 20, min: 10}}), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])}, undefined]), ...overrideResponse})

export const getDirectoryWriterV3RelationSetResponseMock = (overrideResponse: Partial< V3SetRelationResponse > = {}): V3SetRelationResponse => ({result: faker.helpers.arrayElement([{created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), etag: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), object_id: faker.string.alpha({length: {max: 20, min: 10}}), object_type: faker.string.alpha({length: {max: 20, min: 10}}), relation: faker.string.alpha({length: {max: 20, min: 10}}), subject_id: faker.string.alpha({length: {max: 20, min: 10}}), subject_relation: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), subject_type: faker.string.alpha({length: {max: 20, min: 10}}), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])}, undefined]), ...overrideResponse})

export const getDirectoryReaderV3RelationsListResponseMock = (overrideResponse: Partial< V3GetRelationsResponse > = {}): V3GetRelationsResponse => ({objects: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: {created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), display_name: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), etag: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), id: faker.string.alpha({length: {max: 20, min: 10}}), properties: faker.helpers.arrayElement([{}, undefined]), type: faker.string.alpha({length: {max: 20, min: 10}}), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])}
      }, undefined]), page: faker.helpers.arrayElement([{next_token: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined])}, undefined]), results: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), etag: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), object_id: faker.string.alpha({length: {max: 20, min: 10}}), object_type: faker.string.alpha({length: {max: 20, min: 10}}), relation: faker.string.alpha({length: {max: 20, min: 10}}), subject_id: faker.string.alpha({length: {max: 20, min: 10}}), subject_relation: faker.helpers.arrayElement([faker.string.alpha({length: {max: 20, min: 10}}), undefined]), subject_type: faker.string.alpha({length: {max: 20, min: 10}}), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), ...overrideResponse})


export const getOpenidAuthzenAccessV1EvaluationPostMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<V1EvaluationResponse> | V1EvaluationResponse) | V1EvaluationResponse) => {
  return http.post('*/access/v1/evaluation', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getOpenidAuthzenAccessV1EvaluationPostResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getOpenidAuthzenAccessV1EvaluationsPostMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<V1EvaluationsResponse> | V1EvaluationsResponse) | V1EvaluationsResponse) => {
  return http.post('*/access/v1/evaluations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getOpenidAuthzenAccessV1EvaluationsPostResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getOpenidAuthzenAccessV1SearchActionPostMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<V1ActionSearchResponse> | V1ActionSearchResponse) | V1ActionSearchResponse) => {
  return http.post('*/access/v1/search/action', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getOpenidAuthzenAccessV1SearchActionPostResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getOpenidAuthzenAccessV1SearchPostMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<V1ResourceSearchResponse> | V1ResourceSearchResponse) | V1ResourceSearchResponse) => {
  return http.post('*/access/v1/search/resource', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getOpenidAuthzenAccessV1SearchPostResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getOpenidAuthzenAccessV1SearchSubjectPostMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<V1SubjectSearchResponse> | V1SubjectSearchResponse) | V1SubjectSearchResponse) => {
  return http.post('*/access/v1/search/subject', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getOpenidAuthzenAccessV1SearchSubjectPostResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getDirectoryAssertionV3AssertionSetMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<V3SetAssertionResponse> | V3SetAssertionResponse) | V3SetAssertionResponse) => {
  return http.post('*/api/v3/directory/assertion', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDirectoryAssertionV3AssertionSetResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getDirectoryAssertionV3AssertionDeleteMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<V3DeleteAssertionResponse> | V3DeleteAssertionResponse) | V3DeleteAssertionResponse) => {
  return http.delete('*/api/v3/directory/assertion/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDirectoryAssertionV3AssertionDeleteResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getDirectoryAssertionV3AssertionGetMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<V3GetAssertionResponse> | V3GetAssertionResponse) | V3GetAssertionResponse) => {
  return http.get('*/api/v3/directory/assertion/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDirectoryAssertionV3AssertionGetResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getDirectoryAssertionV3AssertionsListMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<V3ListAssertionsResponse> | V3ListAssertionsResponse) | V3ListAssertionsResponse) => {
  return http.get('*/api/v3/directory/assertions', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDirectoryAssertionV3AssertionsListResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getDirectoryReaderV3CheckMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<V3CheckResponse> | V3CheckResponse) | V3CheckResponse) => {
  return http.post('*/api/v3/directory/check', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDirectoryReaderV3CheckResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getDirectoryReaderV3CheckPermissionMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<V3CheckPermissionResponse> | V3CheckPermissionResponse) | V3CheckPermissionResponse) => {
  return http.post('*/api/v3/directory/check/permission', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDirectoryReaderV3CheckPermissionResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getDirectoryReaderV3CheckRelationMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<V3CheckRelationResponse> | V3CheckRelationResponse) | V3CheckRelationResponse) => {
  return http.post('*/api/v3/directory/check/relation', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDirectoryReaderV3CheckRelationResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getDirectoryReaderV3ChecksMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<V3ChecksResponse> | V3ChecksResponse) | V3ChecksResponse) => {
  return http.post('*/api/v3/directory/checks', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDirectoryReaderV3ChecksResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getDirectoryReaderV3GraphMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<V3GetGraphResponse> | V3GetGraphResponse) | V3GetGraphResponse) => {
  return http.get('*/api/v3/directory/graph/:objectType/:relation/:subjectType', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDirectoryReaderV3GraphResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getDirectoryModelV3ManifestDeleteMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<V3DeleteManifestResponse> | V3DeleteManifestResponse) | V3DeleteManifestResponse) => {
  return http.delete('*/api/v3/directory/manifest', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDirectoryModelV3ManifestDeleteResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getDirectoryModelV3ManifestGetMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Blob | Promise<Blob>) | Blob) => {
  return http.get('*/api/v3/directory/manifest', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDirectoryModelV3ManifestGetResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getDirectoryModelV3ManifestGetMetadataMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.head>[1]>[0]) => Promise<void> | void) | void) => {
  return http.head('*/api/v3/directory/manifest', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getDirectoryModelV3ManifestSetMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<V3SetManifestResponse> | V3SetManifestResponse) | V3SetManifestResponse) => {
  return http.post('*/api/v3/directory/manifest', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDirectoryModelV3ManifestSetResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getDirectoryWriterV3ObjectSetMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<V3SetObjectResponse> | V3SetObjectResponse) | V3SetObjectResponse) => {
  return http.post('*/api/v3/directory/object', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDirectoryWriterV3ObjectSetResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getDirectoryWriterV3ObjectDeleteMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<V3DeleteObjectResponse> | V3DeleteObjectResponse) | V3DeleteObjectResponse) => {
  return http.delete('*/api/v3/directory/object/:objectType/:objectId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDirectoryWriterV3ObjectDeleteResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getDirectoryReaderV3ObjectGetMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<V3GetObjectResponse> | V3GetObjectResponse) | V3GetObjectResponse) => {
  return http.get('*/api/v3/directory/object/:objectType/:objectId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDirectoryReaderV3ObjectGetResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getDirectoryReaderV3ObjectsListMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<V3GetObjectsResponse> | V3GetObjectsResponse) | V3GetObjectsResponse) => {
  return http.get('*/api/v3/directory/objects', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDirectoryReaderV3ObjectsListResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getDirectoryWriterV3RelationDeleteMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<V3DeleteRelationResponse> | V3DeleteRelationResponse) | V3DeleteRelationResponse) => {
  return http.delete('*/api/v3/directory/relation', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDirectoryWriterV3RelationDeleteResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getDirectoryReaderV3RelationGetMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<V3GetRelationResponse> | V3GetRelationResponse) | V3GetRelationResponse) => {
  return http.get('*/api/v3/directory/relation', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDirectoryReaderV3RelationGetResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getDirectoryWriterV3RelationSetMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<V3SetRelationResponse> | V3SetRelationResponse) | V3SetRelationResponse) => {
  return http.post('*/api/v3/directory/relation', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDirectoryWriterV3RelationSetResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getDirectoryReaderV3RelationsListMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<V3GetRelationsResponse> | V3GetRelationsResponse) | V3GetRelationsResponse) => {
  return http.get('*/api/v3/directory/relations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDirectoryReaderV3RelationsListResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}
export const getDirectoryMock = () => [
  getOpenidAuthzenAccessV1EvaluationPostMockHandler(),
  getOpenidAuthzenAccessV1EvaluationsPostMockHandler(),
  getOpenidAuthzenAccessV1SearchActionPostMockHandler(),
  getOpenidAuthzenAccessV1SearchPostMockHandler(),
  getOpenidAuthzenAccessV1SearchSubjectPostMockHandler(),
  getDirectoryAssertionV3AssertionSetMockHandler(),
  getDirectoryAssertionV3AssertionDeleteMockHandler(),
  getDirectoryAssertionV3AssertionGetMockHandler(),
  getDirectoryAssertionV3AssertionsListMockHandler(),
  getDirectoryReaderV3CheckMockHandler(),
  getDirectoryReaderV3CheckPermissionMockHandler(),
  getDirectoryReaderV3CheckRelationMockHandler(),
  getDirectoryReaderV3ChecksMockHandler(),
  getDirectoryReaderV3GraphMockHandler(),
  getDirectoryModelV3ManifestDeleteMockHandler(),
  getDirectoryModelV3ManifestGetMockHandler(),
  getDirectoryModelV3ManifestGetMetadataMockHandler(),
  getDirectoryModelV3ManifestSetMockHandler(),
  getDirectoryWriterV3ObjectSetMockHandler(),
  getDirectoryWriterV3ObjectDeleteMockHandler(),
  getDirectoryReaderV3ObjectGetMockHandler(),
  getDirectoryReaderV3ObjectsListMockHandler(),
  getDirectoryWriterV3RelationDeleteMockHandler(),
  getDirectoryReaderV3RelationGetMockHandler(),
  getDirectoryWriterV3RelationSetMockHandler(),
  getDirectoryReaderV3RelationsListMockHandler()
]
