import {
  delay,
  http,
  HttpResponse
} from 'msw';

/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Authorizer
 * Authorizer service
 * OpenAPI spec version: v0.20.10
 */
import {
  faker
} from '@faker-js/faker';

import type {
  V2CompileResponse,
  V2DecisionTreeResponse,
  V2GetPolicyResponse,
  V2InfoResponse,
  V2IsResponse,
  V2ListPoliciesResponse,
  V2QueryResponse
} from '../../types/authorizer';


export const getAuthorizerCompileResponseMock = (overrideResponse: Partial< V2CompileResponse > = {}): V2CompileResponse => ({metrics: faker.helpers.arrayElement([{}, undefined]), result: faker.helpers.arrayElement([{}, undefined]), trace: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => ({})), undefined]), trace_summary: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), ...overrideResponse})

export const getAuthorizerDecisionTreeResponseMock = (overrideResponse: Partial< V2DecisionTreeResponse > = {}): V2DecisionTreeResponse => ({path: faker.helpers.arrayElement([{}, undefined]), path_root: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getAuthorizerIsResponseMock = (overrideResponse: Partial< V2IsResponse > = {}): V2IsResponse => ({decisions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => ({decision: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), is: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), ...overrideResponse})

export const getAuthorizerQueryResponseMock = (overrideResponse: Partial< V2QueryResponse > = {}): V2QueryResponse => ({metrics: faker.helpers.arrayElement([{}, undefined]), response: faker.helpers.arrayElement([{}, undefined]), trace: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => ({})), undefined]), trace_summary: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), ...overrideResponse})

export const getInfoGetResponseMock = (overrideResponse: Partial< V2InfoResponse > = {}): V2InfoResponse => ({arch: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), commit: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), date: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), os: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), version: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getPoliciesListResponseMock = (overrideResponse: Partial< V2ListPoliciesResponse > = {}): V2ListPoliciesResponse => ({result: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ max: 10, min: 1 }) }, (_, i) => i + 1).map(() => ({ast: faker.helpers.arrayElement([{}, undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), package_path: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), package_root: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), raw: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), ...overrideResponse})

export const getPoliciesGetResponseMock = (overrideResponse: Partial< V2GetPolicyResponse > = {}): V2GetPolicyResponse => ({result: faker.helpers.arrayElement([{ast: faker.helpers.arrayElement([{}, undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), package_path: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), package_root: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), raw: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), ...overrideResponse})


export const getAuthorizerCompileMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<V2CompileResponse> | V2CompileResponse) | V2CompileResponse) => {
  return http.post('*/api/v2/authz/compile', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthorizerCompileResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getAuthorizerDecisionTreeMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<V2DecisionTreeResponse> | V2DecisionTreeResponse) | V2DecisionTreeResponse) => {
  return http.post('*/api/v2/authz/decisiontree', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthorizerDecisionTreeResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getAuthorizerIsMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<V2IsResponse> | V2IsResponse) | V2IsResponse) => {
  return http.post('*/api/v2/authz/is', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthorizerIsResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getAuthorizerQueryMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<V2QueryResponse> | V2QueryResponse) | V2QueryResponse) => {
  return http.post('*/api/v2/authz/query', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthorizerQueryResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getInfoGetMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<V2InfoResponse> | V2InfoResponse) | V2InfoResponse) => {
  return http.get('*/api/v2/info', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getInfoGetResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getPoliciesListMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<V2ListPoliciesResponse> | V2ListPoliciesResponse) | V2ListPoliciesResponse) => {
  return http.get('*/api/v2/policies', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPoliciesListResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}

export const getPoliciesGetMockHandler = (overrideResponse?: ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<V2GetPolicyResponse> | V2GetPolicyResponse) | V2GetPolicyResponse) => {
  return http.get('*/api/v2/policies/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPoliciesGetResponseMock()),
      { headers: { 'Content-Type': 'application/json' },
        status: 200
      })
  })
}
export const getAuthorizerMock = () => [
  getAuthorizerCompileMockHandler(),
  getAuthorizerDecisionTreeMockHandler(),
  getAuthorizerIsMockHandler(),
  getAuthorizerQueryMockHandler(),
  getInfoGetMockHandler(),
  getPoliciesListMockHandler(),
  getPoliciesGetMockHandler()
]
